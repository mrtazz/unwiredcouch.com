<?xml version="1.0" encoding="utf-8"?> 
    <feed xmlns="http://www.w3.org/2005/Atom"> 
    
    <title>unwiredcouch.com</title> 
    <subtitle>unwiredcouch.com</subtitle> 
    <link href="https://unwiredcouch.com/atom.xml" rel="self" /> 
    <link href="https://unwiredcouch.com/" /> 
    <id>https://unwiredcouch.com/</id> 
    <updated>2019-11-15T19:20:15+00:00</updated> 
    <author> 
      <name>Daniel</name> 
      <email>d@unwiredcouch.com</email> 
    </author><entry> 
          <title>Mirror GitHub repositories in pure shell</title> 
          <link href="https://unwiredcouch.combits//2014/08/16/github-mirror-shell.html" /> 
              <id>https://unwiredcouch.combits//2014/08/16/github-mirror-shell.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;As I have &lt;a href=&quot;http://www.unwiredcouch.com/2013/10/30/uncloud-your-life.html&quot;&gt;written before&lt;/a&gt; I have slowly started to move my data out of cloud services where applicable. One part of that was setting up my own backup server at home based on &lt;a href=&quot;http://www.unwiredcouch.com/bits/2014/03/18/zfs-rsync-backups.html&quot;&gt;FreeBSD, zfs and rsync&lt;/a&gt;. One part I consider important data but didn&#39;t have on there was my (Open Source) code I host on GitHub. This also wasn&#39;t ever a priority as the code is public anyways so it wasn&#39;t a privacy issue for me, and I also trust GitHub to run backups so I wasn&#39;t overly concerned about my data vanishing. Still I wanted to have my own backup of things.&lt;/p&gt;
&lt;p&gt;So I started to look into how people mirror their repositories for backups, speed, availability and other things. There exist quite a lot of solutions out there which are mostly written in Ruby or Python. While this is fine and I would encourage you to look into those, I didn&#39;t want to deal with installing pip to install some Python script or installing yet another gem just for something that can be accomplished with a couple of lines of shell. So I wrote my own set of scripts in Bourne shell (one of the default installed shells in FreeBSD) so I could just cron them up on my backup box.&lt;/p&gt;
&lt;p&gt;First I needed a way to get a list of all my repositories. Thankfully GitHub has a &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;pretty great API&lt;/a&gt; so I can just get a list of all my repositories and their git clone URLs:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Usage:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# github_repo_list.sh mrtazz [34345k34j3k4b2jk3]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# get a list of all public repos for a user&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Usage:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;github_repo_list.sh USERNAME [TOKEN]&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;exit&lt;/span&gt; 1&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;va&quot;&gt;TOKEN=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;amp;access_token=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${2}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;CURL=$(&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;which&lt;/span&gt; curl&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${CURL}&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# fall back to /usr/local/bin/curl&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;va&quot;&gt;CURL=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;/usr/local/bin/curl&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;BASEURL=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;https://api.github.com/users/&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${1}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/repos?type=owner&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${TOKEN}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;count=&lt;/span&gt;1&lt;/span&gt;
&lt;span id=&quot;cb1-25&quot;&gt;&lt;a href=&quot;#cb1-25&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-26&quot;&gt;&lt;a href=&quot;#cb1-26&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${count}&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-gt&lt;/span&gt; 0&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-27&quot;&gt;&lt;a href=&quot;#cb1-27&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-28&quot;&gt;&lt;a href=&quot;#cb1-28&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;va&quot;&gt;lines=$(${CURL}&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BASEURL}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;amp;page=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${count}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;grep&lt;/span&gt; git_url &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cut&lt;/span&gt; -d&lt;span class=&quot;st&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f6 &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sed&lt;/span&gt; -e &lt;span class=&quot;st&quot;&gt;&amp;quot;s/[&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;,]//g&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-29&quot;&gt;&lt;a href=&quot;#cb1-29&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-30&quot;&gt;&lt;a href=&quot;#cb1-30&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# stop if we don&amp;#39;t get any more content. A bit hacky but I don&amp;#39;t want to&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-31&quot;&gt;&lt;a href=&quot;#cb1-31&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# parse HTTP header data to figure out the last page&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-32&quot;&gt;&lt;a href=&quot;#cb1-32&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${lines}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-33&quot;&gt;&lt;a href=&quot;#cb1-33&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;count=&lt;/span&gt;0&lt;/span&gt;
&lt;span id=&quot;cb1-34&quot;&gt;&lt;a href=&quot;#cb1-34&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-35&quot;&gt;&lt;a href=&quot;#cb1-35&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;line&lt;/span&gt; in &lt;span class=&quot;va&quot;&gt;${lines}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${line}&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-36&quot;&gt;&lt;a href=&quot;#cb1-36&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;count=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$count&lt;/span&gt; + 1&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-37&quot;&gt;&lt;a href=&quot;#cb1-37&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-38&quot;&gt;&lt;a href=&quot;#cb1-38&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-39&quot;&gt;&lt;a href=&quot;#cb1-39&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script takes a username and an optional access token and retrieves the public list of repositories for that user. It then outputs the git clone URLs one per line so it&#39;s easily stored in a text file or fed into other scripts. There are some minor inefficiencies and missing features in there as it curls one more time than needed to the GitHub API to figure out if there are more results and it also only supports public repositories as I don&#39;t have private ones at the moment. However changing the URL to call if I ever want to mirror private repositories is relatively easy and I don&#39;t care that much about the extra curl as this script is not gonna be run very frequently.&lt;/p&gt;
&lt;p&gt;This now gives me a list of all repositories on my account I want to mirror. The next step is actually mirroring them. For that I wrote a script that looks like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# take a list of git clone urls on STDIN and clone them if they don&amp;#39;t exist.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Usage:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;github_repo_sync.sh directory&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;exit&lt;/span&gt; 1&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;GIT=$(&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;which&lt;/span&gt; git&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${GIT}&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# if git is not in path fall back to /usr/local&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-f&lt;/span&gt; /usr/local/bin/git&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;GIT=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;/usr/local/bin/git&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;You need to have git installed.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;exit&lt;/span&gt; 1&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# switch to archive directory&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;#cb2-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;#cb2-25&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;#cb2-26&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;line&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;#cb2-27&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;va&quot;&gt;directory=$(&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${line}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cut&lt;/span&gt; -d &lt;span class=&quot;st&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; -f 5&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;#cb2-28&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-29&quot;&gt;&lt;a href=&quot;#cb2-29&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${directory}&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-30&quot;&gt;&lt;a href=&quot;#cb2-30&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;${GIT}&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;clone&lt;/span&gt; --mirror &lt;span class=&quot;va&quot;&gt;${line}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-31&quot;&gt;&lt;a href=&quot;#cb2-31&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-32&quot;&gt;&lt;a href=&quot;#cb2-32&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${directory}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-33&quot;&gt;&lt;a href=&quot;#cb2-33&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;${GIT}&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;fetch&lt;/span&gt; -p origin&lt;/span&gt;
&lt;span id=&quot;cb2-34&quot;&gt;&lt;a href=&quot;#cb2-34&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;cd&lt;/span&gt; ..&lt;/span&gt;
&lt;span id=&quot;cb2-35&quot;&gt;&lt;a href=&quot;#cb2-35&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-36&quot;&gt;&lt;a href=&quot;#cb2-36&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-37&quot;&gt;&lt;a href=&quot;#cb2-37&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script checks for each entry in a list of git clone URLs passed in via STDIN and if the directory already exists it fetches changes and if not clones it into the given directory. The mirroring commands reflect the instructions in this &lt;a href=&quot;https://help.github.com/articles/duplicating-a-repository&quot;&gt;GitHub guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now to tie those two together I just set up two cron entries to run those two commands:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;0&lt;/span&gt; 20 * * * ~/bin/github_repo_list.sh mrtazz 0f6 &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; /backup/github/github_repo_list.txt&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;0&lt;/span&gt; 21 * * * ~/bin/github_repo_sync.sh /backup/github &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; /backup/github/github_repo_list.txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first cron entry fetches the list of repositories and sticks them into a text file. The second one runs an hour later and actually syncs all the changes. I set it up to sync into the zfs pool that gets snapshotted every night anyways (as described &lt;a href=&quot;http://www.unwiredcouch.com/bits/2014/03/18/zfs-rsync-backups.html&quot;&gt;here&lt;/a&gt;) so I get that for free. I&#39;m not super happy with running this on a cron as there could be a smarter solution that checks for changes via the API and marks repositories as dirty, but this is the simplest thing that could work and way less work than interacting more with the API. In addition I would love to exclude forks from the backup since I don&#39;t really care about backing those up. But I&#39;ll leave this for iteration&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I track changes to the script in my &lt;a href=&quot;https://github.com/mrtazz/bin&quot;&gt;bin folder repository on GitHub&lt;/a&gt;, so if you&#39;re interested in tracking changes to this setup, follow it there.&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Productive VIM with templates</title> 
          <link href="https://unwiredcouch.combits//2014/07/22/productive-vim-with-templates.html" /> 
              <id>https://unwiredcouch.combits//2014/07/22/productive-vim-with-templates.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;I basically exist inside of vim all day. I write code in there, I write emails in VIM via &lt;a href=&quot;http://www.mutt.org&quot;&gt;mutt&lt;/a&gt;, I take notes with it and I write all my blog posts in VIM. I think it&#39;s clear that improving the way I work with VIM helps in a variety of scenarios. Over time I also noticed that I often start out with the same basic file structure and then fill it with content. For example jekyll blog posts always have the same header, meeting notes always have the same structure and I use a template to reply to recruiter emails in times where I&#39;m not looking for a job (a trick I learned from &lt;a href=&quot;https://twitter.com/katemats&quot;&gt;Kate Matsudaira&lt;/a&gt; in one of her &lt;a href=&quot;http://katemats.com/people-are-lazy/&quot;&gt;great blog posts&lt;/a&gt; about productivity).&lt;/p&gt;
&lt;p&gt;In the coding world VIM provides a great built-in functionality for that which is called &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/autocmd.html#skeleton&quot;&gt;&quot;skeleton files&#39;&lt;/a&gt;. This is a great way to always have a good to go version of C source or header files, Makefiles or RPM spec files. However this is all based on filetypes (or rather file endings) and since I write most of my notes and all my blog posts in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; for example and they all have the same file ending this doesn&#39;t help me much for having different templates. So I started to look around for VIM functionality or plugins that would just let me load templates from a specific location and maybe expand some variables (as I for example like to have the date auto inserted into meeting notes). I didn&#39;t want a full fledged templating engine, although I could certainly have installed and wrapped the &lt;a href=&quot;https://github.com/tobyS/vmustache&quot;&gt;Mustache implementation written in VimL&lt;/a&gt; to do that for me. But I wanted to keep it simple and apparently that solution didn&#39;t exist yet.&lt;/p&gt;
&lt;p&gt;This is why I wrote a VIM plugin called &lt;a href=&quot;https://github.com/mrtazz/vim-stencil&quot;&gt;vim-stencil&lt;/a&gt;. It&#39;s a handful of lines of VimL and it does exactly 2 things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load a template from a specified location&lt;/li&gt;
&lt;li&gt;Expand some variables (currently even only one: the date)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now with a simple call to &lt;code&gt;:Stencil&lt;/code&gt; in VIM I can choose a template for the type of file I&#39;m editing (yes it supports tab completion) and load that into my buffer. I even get the current date for free in templates where I choose to have it. No fuzz, no complicated setup. But a small thing that increases my productivity a lot.&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Shared layout for project pages in Jekyll</title> 
          <link href="https://unwiredcouch.combits//2014/06/14/jekyll-shared-project-layouts.html" /> 
              <id>https://unwiredcouch.combits//2014/06/14/jekyll-shared-project-layouts.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;I use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; a lot, especially for &lt;a href=&quot;http://unwiredcouch.com&quot;&gt;my website&lt;/a&gt;. And I quite like it a lot. I also write and open source the occasional software every now and then, which usually happens on &lt;a href=&quot;https://github.com/mrtazz&quot;&gt;my GitHub profile&lt;/a&gt;. And thankfully GitHub makes it &lt;a href=&quot;https://pages.github.com/&quot;&gt;dead easy&lt;/a&gt; to generate a nice looking page for your project. I&#39;ve used this feature for a long time now and have used a bunch of their awesome provided themes. However since I also host my site on GitHub Pages and thus all my projects are automatically available under a sub path there named after the project name.&lt;/p&gt;
&lt;p&gt;However last week I decided that I wanted to have them all be in a layout similar to my website so the whole page doesn&#39;t change just because you click on a link on my &lt;a href=&quot;http://www.unwiredcouch.com/projects.html&quot;&gt;projects page&lt;/a&gt;. But I also wanted to keep the code for the pages in the respective repo so it&#39;s all in one place while at the same time I didn&#39;t want to copy the layout into each repository.&lt;/p&gt;
&lt;p&gt;Thankfully there is trick you can use with GitHub Pages. If you add git submodules to your repository they are gettiing &lt;a href=&quot;https://help.github.com/articles/using-submodules-with-pages&quot;&gt;pulled in&lt;/a&gt; automatically on page build. So I created a &lt;a href=&quot;https://github.com/mrtazz/jekyll-layouts&quot;&gt;shared repository&lt;/a&gt; to hold the template I wanted for my projects. And now all I have to do to get a project page with the correct layout is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule add https://github.com/mrtazz/jekyll-layouts.git _layouts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the &lt;code&gt;README.md&lt;/code&gt; of my project to &lt;code&gt;index.md&lt;/code&gt; and add the jekyll frontmatter:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;---
layout: project
title: project name
---&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;add a &lt;code&gt;_config.yml&lt;/code&gt; and fill out the following values:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;gaugesid: tracking code for the gaug.es gauge
projecturl: github url for the ribbon in the upper right corner
basesite: base URL to get the CSS from
markdown: kramdown&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only dependency now is that the CSS comes from my main website. Which I&#39;m fine with and is actually a feature because if I ever change something there I want the project pages to reflect that change also. The other downside is that if I change the project layout repository I will have to update the reference in all the project repositories. Which should be fairly straightforward with some automation and is at least better than copying files around and committing them to each repository.&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Backups with rsync and zfs</title> 
          <link href="https://unwiredcouch.combits//2014/03/18/zfs-rsync-backups.html" /> 
              <id>https://unwiredcouch.combits//2014/03/18/zfs-rsync-backups.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;As I &lt;a href=&quot;http://www.unwiredcouch.com/2013/10/30/uncloud-your-life.html&quot;&gt;mentioned before&lt;/a&gt; I&#39;m running my own backup on a server that is running in my apartment. I didn&#39;t really talk a lot about how this works, other than it is running on a HP Microserver with an encrypted ZFS RAID. So I wanted to also quickly jot down how the backup works. This is only set up for a single user right now because I&#39;m the only one using it.&lt;/p&gt;
&lt;p&gt;For me a backup has two important parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have data in a different location&lt;/li&gt;
&lt;li&gt;Be able to restore data from the past&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The time sensitivity of those two properties are pretty different for me. For example I have chosen for myself that I&#39;m happy with only being able to restore deleted data from the last day. So if I create something and delete it 5 hours later, I&#39;m ok with not being able to recover it. On the other hand I&#39;m very aware of the fact that my mailserver can disappear at any given time:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;that moment when you want to make dinner and your mailserver disappears&lt;/p&gt;&amp;mdash; Daniel Schauenberg (@mrtazz) &lt;a href=&quot;https://twitter.com/mrtazz/statuses/411689583370592256&quot;&gt;December 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;This is why I want to copy data to a remote location as often as possible (which for me means about every 15 minutes). And my setup is heavily based around those ideas. The core of the backup system is ZFS and a separate file system for each machine I want to backup. In order to have the ability to go back in time I use &lt;a href=&quot;http://docs.oracle.com/cd/E19253-01/819-5461/gbcya/index.html&quot;&gt;zfs snapshots&lt;/a&gt;. Every night the following script runs on my backup server and creates a snapshot for the day:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# simple script to snapshot locations on a ZFS backup pool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;timestamp=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;date&lt;/span&gt; +%Y-%m-%d-%H:%M:%S&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;volume&lt;/span&gt; in &lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;ls&lt;/span&gt; /backup&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Creating snapshot for &lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${volume}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; at date &lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${timestamp}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;/sbin/zfs&lt;/span&gt; snapshot backup/&lt;span class=&quot;va&quot;&gt;${volume}&lt;/span&gt;@&lt;span class=&quot;va&quot;&gt;${timestamp}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And to make sure that I really do have snapshots I have this simple nagios script to tell me if the snapshotting worked last night.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# nagios script to check age of backup snapshots&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;YESTERDAY=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;date&lt;/span&gt; -v-1d +%Y-%m-%d&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;EXITCODE=&lt;/span&gt;0&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;backup&lt;/span&gt; in &lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;ls&lt;/span&gt; /backup&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; list -t snapshot &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${backup}&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;grep&lt;/span&gt; -q &lt;span class=&quot;va&quot;&gt;${YESTERDAY}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;!=&lt;/span&gt; 0&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Snapshot of &lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${backup}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; missing for &lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${YESTERDAY}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;EXITCODE=&lt;/span&gt;2&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${EXITCODE}&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;==&lt;/span&gt; 0&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;All backup volumes were snapshotted on &lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${YESTERDAY}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${EXITCODE}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this check (which runs on all my servers because I have zpools everywhere) to tell me about the disk health of the backup zpool:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# check for zpool health&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;ZPOOL=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;which&lt;/span&gt; zpool&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;EXITSTATUS=&lt;/span&gt;0&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;IFS=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;$&amp;#39;&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;line&lt;/span&gt; in &lt;span class=&quot;va&quot;&gt;$(${ZPOOL}&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;list&lt;/span&gt; -o name,health &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;grep&lt;/span&gt; -v NAME &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;grep&lt;/span&gt; -v ONLINE&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$line&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;va&quot;&gt;EXITSTATUS=&lt;/span&gt;2&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$EXITSTATUS&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;==&lt;/span&gt; 0&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;All pools are healthy.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-18&quot;&gt;&lt;a href=&quot;#cb3-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$EXITSTATUS&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this setup in place I can simply copy files into the file system that belongs to that machine and it will get snapshotted every night. And what&#39;s an awesome tool to copy data? That&#39;s right, &lt;a href=&quot;http://rsync.samba.org&quot;&gt;rsync&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My backup script runs once every 15 minutes and looks like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Backup script to pull in changes from remote hosts&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;backup&lt;/span&gt; in &lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;ls&lt;/span&gt; /backup&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;grep&lt;/span&gt; -q &lt;span class=&quot;va&quot;&gt;${backup}&lt;/span&gt; ~/.backupexcludes&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;!=&lt;/span&gt; 0&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;/usr/local/bin/rsync&lt;/span&gt; -e &lt;span class=&quot;st&quot;&gt;&amp;#39;ssh -o BatchMode=yes -o ConnectTimeout=10&amp;#39;&lt;/span&gt; \&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot;&gt;&lt;/a&gt;--archive --delete --timeout=5 &lt;span class=&quot;va&quot;&gt;${backup}&lt;/span&gt;:. /backup/&lt;span class=&quot;va&quot;&gt;${backup}&lt;/span&gt;/&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows me to have machines that I used to backup but are no longer online in an excludes list. That way rsync (and ssh) doesn&#39;t hang or error for something that doesn&#39;t need to be backed up anymore anyways. And in case a machine is unavailable or disappears the timeout settings in that script make sure it just gets skipped and retried on the next run.&lt;/p&gt;
&lt;p&gt;I&#39;m pretty happy with the setup, my backup server pulls in data from all my servers on the internet and stores it (forever?). It is chef&#39;d for the most part (though there is always more to automate) and is pretty simple in my opinion. The backup situation for my laptop is not ideal yet, as I manually back it up by running rsync. I want to set the backup server up to also serve some of the backup filesystems as Timemachine targets, so I can just use Timemachine on my laptop and have it automatically run the backups.&lt;/p&gt;
&lt;p&gt;But in the meantime I can add a new backup with this one weird trick:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create /backup/newhost &lt;span class=&quot;kw&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;chown&lt;/span&gt; -R mrtazz:mrtazz /backup/newhost&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
</entry>
<entry> 
          <title>Context specific dotfiles</title> 
          <link href="https://unwiredcouch.combits//2014/02/03/dotoverride.html" /> 
              <id>https://unwiredcouch.combits//2014/02/03/dotoverride.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;I have a &lt;a href=&quot;https://github.com/mrtazz/muttfiles&quot;&gt;collection&lt;/a&gt; &lt;a href=&quot;https://github.com/mrtazz/vimfiles&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://github.com/mrtazz/zshfiles&quot;&gt;various&lt;/a&gt; &lt;a href=&quot;https://github.com/mrtazz/dotfiles&quot;&gt;dotfiles&lt;/a&gt; which I use to configure the most important tools I use everyday. Naturally all those are kept in git and shared between all the machines I work on. The problem is that there might be things I don&#39;t want to store publicly. This might include shell aliases to hostnames, git user emails I only use at work, etc. I used to manage this by having a different branch checked out on machines at work and would just merge in master whenever something changes. However this was super tedious as I had to remember to switch to the right branch depending on whether I wanted to make public or private changes. And after changing something I had to remember to switch back to the correct branch and not accidentally push the private branch to public GitHub. What it effectively ended up being was a whole bunch of dirty repos on different machines that were never in sync and partly had duplicate changes and partly only worked on that box anyways. And whenever I wanted to bring them back in sync it was a huge pain. So I decided to adopt a new strategy for managing context specific dotfiles.&lt;/p&gt;
&lt;p&gt;I added a git repo &lt;code&gt;~/.dotoverrides&lt;/code&gt; to all the machines I work on (or at least most of them) which contains a &lt;code&gt;vimrc&lt;/code&gt;, a &lt;code&gt;zshrc&lt;/code&gt; and so on. On my work machines this is pushed to a repo on our internal GitHub Enterprise instance so I can easily share it between machines. And all my regular dotfiles now source those override files at the very end.&lt;/p&gt;
&lt;p&gt;So in my regular &lt;code&gt;.vimrc&lt;/code&gt; I have something like this:&lt;/p&gt;
&lt;pre class=&quot;vim&quot;&gt;&lt;code&gt;&amp;quot; source overrides configs
if filereadable($HOME.&amp;quot;/.dotoverrides/vimrc&amp;quot;)
  exec &amp;quot;:source &amp;quot;. $HOME . &amp;quot;/.dotoverrides/vimrc&amp;quot;
endif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my &lt;code&gt;.zshrc&lt;/code&gt; I have this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-f&lt;/span&gt;  &lt;span class=&quot;va&quot;&gt;${HOME}&lt;/span&gt;/.dotoverrides/zshrc&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${HOME}&lt;/span&gt;/.dotoverrides/zshrc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in git (only works if you have at least v1.7.10) I&#39;ve added this stanza:&lt;/p&gt;
&lt;pre class=&quot;config&quot;&gt;&lt;code&gt;[include]
  path = ~/.dotoverrides/gitconfig&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I can easily share and push/pull my regular dotfiles in public GitHub and don&#39;t have to pay attention whether or not I&#39;m on the correct branch and if I&#39;m not accidentally pushing to the wrong remote. Whenever I need to use different settings on a work machine I just make sure to add it to the overrides file and have it ready as soon as I open a new shell, run a git command or open vim again.&lt;/p&gt;
&lt;p&gt;So much easier!&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Creating Encrypted Home Directories in FreeBSD</title> 
          <link href="https://unwiredcouch.combits//2013/12/28/encrypted-homedirs.html" /> 
              <id>https://unwiredcouch.combits//2013/12/28/encrypted-homedirs.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;I run FreeBSD with ZFS on all my servers and I generally want to have my home directories encrypted. Since ZFS native encryption is not yet in FreeBSD, I create two ZFS filesystems, which are then encrypted with &lt;a href=&quot;http://www.freebsd.org/doc/handbook/disks-encrypting.html&quot;&gt;GELI encryption&lt;/a&gt; and build a new ZFS pool. This pool is then used as my home directory. In order to simplify this, I have a shell script that takes the username and size as input and creates keys and all partitions as well as the zpool.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;USERHOME=$1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;SIZE=$2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create -omountpoint=/encrypted tank/encrypted&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create tank/encrypted/keys&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create -omountpoint=none tank/encrypted/zvols&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create -ocompression=on tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create -V &lt;span class=&quot;va&quot;&gt;${SIZE}&lt;/span&gt;G tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk0&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create -V &lt;span class=&quot;va&quot;&gt;${SIZE}&lt;/span&gt;G tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk1&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zfs&lt;/span&gt; create tank/encrypted/keys/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;dd&lt;/span&gt; if=/dev/random of=/encrypted/keys/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk0 bs=64 count=1&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;dd&lt;/span&gt; if=/dev/random of=/encrypted/keys/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk1 bs=64 count=1&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;geli&lt;/span&gt; init -s 4096 -K /encrypted/keys/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk0 \&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot;&gt;&lt;/a&gt;/dev/zvol/tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk0&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;geli&lt;/span&gt; init -s 4096 -K /encrypted/keys/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk1 \&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot;&gt;&lt;/a&gt;/dev/zvol/tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk1&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;geli&lt;/span&gt; attach -k /encrypted/keys/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk0 \&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot;&gt;&lt;/a&gt;/dev/zvol/tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk0&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;geli&lt;/span&gt; attach -k /encrypted/keys/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk1 \&lt;/span&gt;
&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot;&gt;&lt;/a&gt;/dev/zvol/tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk1&lt;/span&gt;
&lt;span id=&quot;cb1-25&quot;&gt;&lt;a href=&quot;#cb1-25&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-26&quot;&gt;&lt;a href=&quot;#cb1-26&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;zpool&lt;/span&gt; create &lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;-home raidz \&lt;/span&gt;
&lt;span id=&quot;cb1-27&quot;&gt;&lt;a href=&quot;#cb1-27&quot;&gt;&lt;/a&gt;/dev/zvol/tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk0.eli \&lt;/span&gt;
&lt;span id=&quot;cb1-28&quot;&gt;&lt;a href=&quot;#cb1-28&quot;&gt;&lt;/a&gt;/dev/zvol/tank/encrypted/zvols/&lt;span class=&quot;va&quot;&gt;${USERHOME}&lt;/span&gt;/disk1.eli&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I try to keep the script updated on &lt;a href=&quot;https://github.com/mrtazz/bin/blob/master/create_encrypted_zfs_home.sh&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Pen and Paper</title> 
          <link href="https://unwiredcouch.com/2019/07/05/pen-and-paper.html" /> 
              <id>https://unwiredcouch.com/2019/07/05/pen-and-paper.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;A couple of years ago I went from working in an office to working remote mostly from home. A couple of months in I realized how my productivity had dropped significantly. For years everything I had to do and most of the planning around it has lived in &lt;a href=&quot;https://www.omnigroup.com/omnifocus&quot; title=&quot;Omnifocus&quot;&gt;Omnifocus&lt;/a&gt;. I have even written &lt;a href=&quot;https://unwiredcouch.com/2014/05/13/omnifocus.html&quot; title=&quot;Omnifocus post&quot;&gt;about it before&lt;/a&gt;. For the rest of planning and notes I kept a handful of markdown files in a git repo, held together by Makefiles and &lt;a href=&quot;https://github.com/mrtazz/vim-plan&quot; title=&quot;vim-plan plugin&quot;&gt;a vim plugin&lt;/a&gt;. But now it didn’t work for me anymore. I kept opening OmniFocus just to find myself aimlessly clicking and sorting things around. I redid the layout of my perspectives again. Restructured all the GTD contexts and areas of focus. But nothing actually changed. Looking at the app it just blurred with all the other open windows. All the other apps. It became kind of meaningless. I realized with 100% of work and interactions happening on my screen now, everything felt the same to me. I was unable to focus on what I wanted to do. Planning was an app switch away from coding was an app switch away from meetings was an app switch away from my todos. There were many times where I caught myself cycling from one thing to the other a couple of times within minutes. My attention was completely shot. Additionally I had so many Omnifocus integrations set up that were pulling in my JIRA tickets, my assigned code reviews, and even emails I needed to reply to at some point. The longer I wasn’t using Omnifocus the more it got cluttered with things that needed filing. Instead of helping me get organized it did the opposite. I had over engineered Omnifocus having succumbed to the idea that I&#39;d be more productive the more I automate and fine tune it.&lt;/p&gt;
&lt;h2 id=&quot;trying-something-new-ish&quot;&gt;Trying something new(-ish)&lt;/h2&gt;
&lt;p&gt;I needed to change things up. And the solution for this couldn&#39;t be another app. It needed to be different. And it turns out this is a pretty normal thing for humans. We link memories (which things to remember to do basically are) to locations via the hippocampus.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the reason it&#39;s important to have a designated place for each of our belongings - the hippocampus does the remembering for us if we associate an object with a particular spatial location.&lt;/p&gt;
&lt;p class=&quot;cite&quot;&gt;
&amp;mdash; &lt;cite&gt;Daniel Levitin, The Organized Mind (p. 91)&lt;/cite&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve been carrying a Moleskine notebook with me since early 2008. Early on I had already used it as a todo organizer before switching to Things and eventually Omnifocus. I’ve used it on and off for random things (rarely enough for it to last 10 years). And it’s been the testing ground every time I wanted to get back to taking more analog notes. I’ve also backed the &lt;a href=&quot;https://unwiredcouch.com/2015/03/18/spark-notebook-omnifocus.html%20%22Spark%20Notebook%20post%22&quot;&gt;Spark Notebook&lt;/a&gt; on Kickstarter and used that with a lot of success for a while. So when I was looking to change things up from my digital routine I remembered having read about the &lt;a href=&quot;https://bulletjournal.com/&quot; title=&quot;Bullet Journal method&quot;&gt;Bullet Journal method&lt;/a&gt; and decided to give it a try.&lt;/p&gt;
&lt;h2 id=&quot;getting-started-with-a-bullet-journal&quot;&gt;Getting started with a Bullet Journal&lt;/h2&gt;
&lt;p&gt;For getting set up I started reading the website first and watched the canonical intro video linked from there. But being used to this elaborate GTD setup I wasn’t convinced that a minimalist way worked for me. I read a lot of fairly popular posts on getting started with bullet journaling from websites like &lt;a href=&quot;https://littlecoffeefox.com/&quot; title=&quot;Little Coffee Fox&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://www.tinyrayofsunshine.com&quot; title=&quot;Tiny Ray of Sunshines&quot;&gt;this one&lt;/a&gt; and a ton of other blog posts to understand how this is being used by different people. And then I bought a new notebook and some pens and started with my own.&lt;/p&gt;
&lt;p&gt;And I absolutely overdid it. I used a ton of color and differently sized pens to denote headlines, priorities, etc. I had 2 different systems (dot stickers and sticky labels) do denote important pages. And I added a ton of modules and collections like trackers for workout, meditation, water intake, and reading time. I had very elaborate monthly and weekly spreads, trying to recreate the organizational cockpit that I always wanted Omnifocus to be. I put way too many things to do in, areas of focus with color coded headings, and complicated time blocking details. My daily spread had a &lt;a href=&quot;https://medium.com/rohdesign/the-daily-plan-bar-357972361096&quot; title=&quot;Rohdesign Daily Plan bar&quot;&gt;daily plan bar&lt;/a&gt; that included all my meetings and time blocks for the day. My weekly spreads were as complicated and stuffed, at some point even including which days to take out the trash. Bringing me to up to an hour of just setting up my page to get started for the day. All to combat the feeling of not getting things done and falling of the wagon again.&lt;/p&gt;
&lt;p&gt;Of course once the initial excitement had worn off I fell back into seeing maintaining this complicated thing as a chore and neglected it. And I ran into the same problem I had with Omnifocus of having a layout that was very tuned to my workdays. On the weekend or when I was taking vacation, it wasn’t useful. And I hardly interacted with the journal. Leaving me again with the guilt of “having fallen off”. One important difference though was that on those weekend days and during time off where I couldn’t bother to get into my complicated setups, when I did use the journal it resembled a lot more the original idea of the Bullet Journal. And instead of giving up and changing back to Omnifocus, I stuck with it.&lt;/p&gt;
&lt;h2 id=&quot;what-my-bullet-journal-actually-looks-like-now&quot;&gt;What my Bullet Journal actually looks like now&lt;/h2&gt;
&lt;p&gt;One of those vacations was at the end of last year. During that time I reduced my usage of the journal to basically only a weekly spread. Mostly because there wasn&#39;t much to keep track of. And I realized it still worked for me. I still put all my todos and appointments in there. And it adapted to the difference in usage wonderfully. I was also about to start my third Bullet Journal, having journaled more than twice as much as the previous 10 years combined. I bought the official &lt;a href=&quot;https://bulletjournal.com/pages/book&quot; title=&quot;Bullet Journal Book&quot;&gt;Bullet Journal book&lt;/a&gt; to learn more about the ideas and philosophies behind the original approach given I had more belief it could work for me. And aside from all the other interesting things in the book, the thing that really changed the way I thought about it was that it&#39;s still supposed to be more like a journal than a GTD system.&lt;/p&gt;
&lt;p&gt;After finishing the book I slimmed down my Bullet Journal to the useful bare essentials. I kept the original monthly layout I had already been using but stripped down the monthly task list to a literal list instead of different areas with colored headlines. The 2 page weekly spread turned into a single page of tasks I want to get done over the course of the week. And the daily spread is no longer a plan bar for a meticulously planned out day. It now just starts with the date headline and serves 90% as a journal for recording the day rather than a pre-planned skeleton of how I think the day will go. Because one of the big reasons why I was often abandoning the journal was because they day almost never turned out as planned. Making me feel like the journal was less useful.&lt;/p&gt;
&lt;p&gt;I kept marking the future log (which for me is the combined &lt;a href=&quot;https://bulletjournal.com/blogs/bulletjournalist/future-log-inspiration%20%22Calendex%20Alistair%20Hybrid%20Future%20Log%22&quot;&gt;calendex/alistair&lt;/a&gt; method), monthly and weekly spreads, as well as important collections with dot stickers. That way I can quickly find e.g. the page with the last monthly spread if I want to look something up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pen-and-paper/dot-stickers.jpeg&quot; title=&quot;Dot Stickers&quot; alt=&quot;dot stickers for bookmarks&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And another big insight from the book was that I’m now leaning on &lt;a href=&quot;https://bulletjournal.com/blogs/bulletjournalist/migration&quot; title=&quot;Bullet Journal Migrations&quot;&gt;migrations&lt;/a&gt; a lot more than I used to even though I don’t do daily migrations anymore. I scan the last pages for the current week in the morning for things that still need to get done and if they are a priority I move them to the current day. However that rarely happens and it mostly a measure for me to not forget about priorities. I do weekly and monthly migrations where I thoroughly go through the pages and migrate items, add additional context, put things into the future log (or the topic specific collections for things like personal, work, apartment, etc that serve as a sort of backlog). But otherwise I really just start a new headline every morning and start journaling.&lt;/p&gt;
&lt;h2 id=&quot;in-closing&quot;&gt;In Closing&lt;/h2&gt;
&lt;p&gt;Switching to paper for organizing my todos, thoughts, events, and planning things has been absolutely wonderful for my stress levels and mental health. Especially after trimming the process down to the minimum. I’m no longer stressing about the perfect setup, but use the journal in the way that makes the most sense for me in the moment. I still use a reminders list on my phone for things on the go or when I don’t have the journal with me to migrate over later. I’m much more focused and calm about organizing things when I’m able to close my laptop and just open the journal, it feels much less noisy. Using pen and paper so much every day also lead me to occasionally doodle on pages and discover my interest in drawing and art which has been another huge source of joy for me.&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Factors of Confidence</title> 
          <link href="https://unwiredcouch.com/2019/04/02/factors-of-confidence.html" /> 
              <id>https://unwiredcouch.com/2019/04/02/factors-of-confidence.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;I&#39;ve been having a lot of discussions about delivery of software lately and especially about the deployment part of it. This made me think about the last couple of years of working on deployment and development tooling and the approach I take there.&lt;/p&gt;
&lt;p&gt;I&#39;ve come to view this from a perspective of formulating a hypothesis and establishing factors of confidence to confirm or refute this hypothesis. This sounds very abstract and theoretical at first. But bear with me for a moment here. The basis for all delivery is a change (or patch, diff, commit, change set, whatever you wanna call it). This change is meant to improve something. Add a feature (or establish the base for one), fix a bug, improve performance, increase visibility, or just clean up some technical debt. This means you&#39;re going to production to make the world better. However given the complex nature of the systems we deploy software to, you won&#39;t actually know if your change is a net positive until it&#39;s running in production. And even then you often only know a couple of hours or even days later. So all you have when you&#39;re in front of your editor writing some code is an idea about what will make the word better. A hypothesis.&lt;/p&gt;
&lt;p&gt;The job of a delivery pipeline now is to help you get confidence. Confidence that your hypothesis holds. Or confidence when you have to refute it. However all of the complex interactions of systems means you don’t get to have that single unified proof that your code is what you want it to be. Your ability to make a decision about your change is based on many small factors of confidence. And the delivery pipeline should give you tools along the way to acquire those factors of confidence in reasonable time and effort. It usually starts with a very quick feedback loop and something akin to a unit test. You can write them quickly and they can be verified quickly (individually that is. Running large numbers of unit tests on CI is still a not so easy problem). You then usually move on to test that are more expensive with a longer feedback loop. Like an integration test. Maybe a QA environment. A staging environment. Smoker tests in production. Canary deploys. And so on. All of those things (and this is hardly an exhaustive list) are intended to give you confidence in something. That your logic is correct, that your code works well with other API endpoints, that it interacts with other code on the site in a way that doesn’t break the whole thing, that it doesn’t put too much load on downstream systems, etc, etc. And ideally all these things in place will give you a nice set of guardrails that make deploying to production an enjoyable experience.&lt;/p&gt;
&lt;p&gt;However given these tools are merely a snapshot of your understanding of the system at the time and what confidence is needed to make a change to it, the delivery pipeline needs to be constantly maintained and re-evaluated. Maybe system growth now means that the trade off of running a large array of unit tests and the time it takes, doesn’t pay off in the confidence it provides. Or maybe it does and this means you need to think of something to make running unit tests faster. Maybe a new additional service means you now need to add a set of smoker tests. Whatever it is, the most important thing is that you know &lt;em&gt;why&lt;/em&gt; any of these tools to assert confidence are in place. &lt;em&gt;Who&lt;/em&gt; are they for and &lt;em&gt;what&lt;/em&gt; are they telling you? The last couple of years have seen the rise of a huge number of fantastic delivery systems. Often highly opinionated or infinitely configurable. Sometimes both. It’s easy to just take one of them and cargo cult what they bring with it. And if you don’t already have an established system, this is a fine approach that will certainly make you end up with a better setup than you had before. However I encourage you to look closely what your delivery pipeline is made up of. And what kind of things it gives you confidence in. Do you often see failures after deploys because of surprises in your logic? Maybe you’re missing some unit tests. Are you spending tons of time on unit tests that essentially only re-test the framework code of the tool you’re using? Maybe you don’t need those tests and can free up a lot of engineering time. Whatever it is, your delivery pipeline needs to give you confidence in changes in &lt;em&gt;your&lt;/em&gt; stack. You know best what kind of things need to go in there. And spending some time to think about that will give you a lot of insight and pay off when it comes to improving your delivery pipeline. And it’s also tons of fun!&lt;/p&gt;
&lt;p&gt;PS: I’ve had many discussions about those things with many people over the years. And they all helped me figure out how I think about delivery and make sense of my rambling thoughts. So if you&#39;ve ever chatted with me about deployment and/or delivery, I&#39;m extremely grateful you took the time and I really enjoyed our chat.&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Capacity planning for Etsy’s web and API clusters</title> 
          <link href="https://unwiredcouch.com/2018/10/23/capacity-planning-etsy.html" /> 
              <id>https://unwiredcouch.com/2018/10/23/capacity-planning-etsy.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;I wrote about how we do capacity planning for our web and API clusters on Etsy&#39;s &lt;a href=&quot;https://codeascraft.com&quot;&gt;engineering blog&lt;/a&gt;. You can find the post &lt;a href=&quot;https://codeascraft.com/2018/10/23/capacity-planning-for-etsys-web-and-api-tiers/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>
<entry> 
          <title>Learning to have an engineering vision</title> 
          <link href="https://unwiredcouch.com/2018/01/03/engineering-vision.html" /> 
              <id>https://unwiredcouch.com/2018/01/03/engineering-vision.html</id> 
          <updated>1969-12-31T23:59:59+00:00</updated> 
          <content type="html">&lt;p&gt;Saying that the last 18 months or so were stressful and full of changes would be a colossal understatement. Work wise I switched to a new team after over 4 years on the same team, which was then dismantled as part of a big structural reorg that was actually part 1 of 2. Part 2 consisted of a larger restructuring that meant my new team also ceased to exist in its then current form after only 10 months. These changes were incredibly important and long overdue. However after a couple of pretty stable years this also meant I had to get out of my comfort zone in a lot of new ways. On both newly created teams I was one of the more senior engineers which meant for me thinking long and hard about how I want to contribute to building up a new team and what my place should and can be there. This meant building up and getting used to new routines, schedules, way of communication and urgencies in work. All muscles I had not really needed to exercise in a while and to a large degree not ever. And besides the build up of technical knowledge about the services we were now providing as a team, the non-technical side of things was where I really grew as an engineer. Specifically the most positive impact on how I view work has been to finally get a better grasp and think hard about what vision means for an infrastructure/systems engineering team.&lt;/p&gt;
&lt;p&gt;I&#39;ve gone through the process of thinking about vision for a team before. At Etsy we use a structure called &quot;VMSO - Vision, Mission, Strategy, Objectives&quot;, to organize and structure teams and departments in what their purpose is within the company and what they contribute to the business. It draws a lot of inspiration from the ideas in this blog post by LinkedIn CEO Jeff Weiner called &lt;a href=&quot;https://www.linkedin.com/pulse/20121029044359-22330283-to-manage-hyper-growth-get-your-launch-trajectory-right&quot;&gt;&quot;From Vision to Values: The Importance of Defining Your Core&quot;&lt;/a&gt;. The rough overview is that vision is the 30 000 foot view, the high level idea on the horizon that (almost) never changes. The world we want to see exist. The mission is derived from it and describes what the team does to get towards the vision. And then it gets more concrete with strategies how to get there and concrete objectives we want to fulfill. It&#39;s not an easy process and definitely takes a whole of brainstorming, suggestions, throwing away suggestions, refining and merging ideas, and consensus building to get there.&lt;/p&gt;
&lt;p&gt;Before this season of change, on my old team, when we were tasked with creating a VMSO for ourselves we always got hung up on the vision. It was always that high level thing that never quite matched the work we were doing. We would meet once or twice and always seemed to end at the same dead ends: &quot;Our work is too multifaceted to be captured by a single statement&quot;, &quot;It&#39;s hard to explain what we do&quot;, &quot;We do anything that needs doing&quot;, &quot;We keep things running&quot;. If you&#39;re working on a general purpose infrastructure team, this might sound familiar to you. It seemed like it was just impossible to come up with a single vision for the team, so we always left it at a half baked, cheesy feeling idea. And of course at that point we didn&#39;t manage to derive a good mission from the vision either. Not to speak of strategy or objectives. I didn&#39;t feel too bad about that at the time. As we had a fairly broad vision statement, it let us basically take on anything we wanted. And to be honest, I &lt;em&gt;loved&lt;/em&gt; working on that team. Although we were always working on separate things, we were a bunch of engineers with the same mindset and approach to work. We had a great team dynamic and our team meetings were a ton of fun. I couldn&#39;t imagine working on a different team.&lt;/p&gt;
&lt;p&gt;And in the middle of this work the first part of the reorg happened and our team got dissolved. I was really upset. While I was fully onboard with the reasoning and goals of the reorg, I couldn&#39;t understand why our team got ended and most of our roadmap dropped. It felt like our work had gone completely unvalued. But then I had a long 1-on-1 with my then &lt;a href=&quot;http://twitter.com/attackgecko&quot;&gt;Engineering Director Jason Wong&lt;/a&gt;. We talked about all of it, he gave me a ton more context. And he made me understand how a team that does &quot;a little bit of everything&quot; is really hard to fit in organizationally. He asked me flat out what the purpose and vision of the team was in the org. Where was the team going? What would it look like in 2 years? And I couldn&#39;t give him a straight, simple answer. I was a very senior engineer on the team and I had no answer. This was the moment where I managed to connect (some of) the dots. And tie together our lack of a comprehensive vision to the downsides of our operating model. We ended up supporting way more things than we could, leading to long periods of maintenance work and almost none of the iterative improvements we planned for at the beginning of the year. We had no way of saying no to work because we didn&#39;t have a good reason to reject the work. We had weeks where our work summary would basically just be &quot;clean up&quot;. Which I love doing and is valuable work, but not if it takes up 90% of someone&#39;s time. We agreed on a vision that was defined by the work we were already doing and not by what we wanted the work to be.&lt;/p&gt;
&lt;p&gt;And at the time I failed to see the big downside of this: it let us take on anything we wanted. While this sounds like fun at first, it makes a lot of things really hard. We continuously worked on 6 different projects as a team of 7 engineers. There was hardly any collaboration possible and we ended up with single points of failure because single engineers would end up being the only ones knowing about a particular system. Once we had hit the limit of reports for a manager (7 at the time), we needed to hire another manager but had a really hard time figuring out how to split the team because there was no clear structure. And boy was it hard to give the elevator pitch for the team in those interviews. We were a team that was ever expanding its work areas to catch things and never managed to retract back and focus on our core. We were aware of those problems and we always thought we will figure them out with time. For the time being it felt better to keep fixing things and worry about the rest later. Succumbing to the always existing, intriguing feeling that something that you can fix needs to be fixed right now.&lt;/p&gt;
&lt;p&gt;And in the middle of 2016, all of this was suddenly gone. And after that very intense and honest 1-on-1 with Jason I felt I knew what I had to do. I joined a new team. I kept thinking about team focus and organizational structure. And when we set up to create a VMSO I went full in and went with the process. I talked a lot to &lt;a href=&quot;http://twitter.com/dbness&quot;&gt;Vanessa Hurst&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/lara_hogan&quot;&gt;Lara Hogan&lt;/a&gt;, both also Engineering Directors at the time, about VMSOs, team structure and direction. Both of them know incredibly well how to build engineering organizations and gave me so much insight and food for thought how to approach this task. I thought hard and good about what &lt;em&gt;I&lt;/em&gt; as an engineer on the team wanted the team to be. And what I don&#39;t want it to be. What were the things that I wanted this team to contribute to the business? What did I not want to bring around anymore and let stay in the past? I wanted to have a vision that I can align goals and work to that would provide focus and effectiveness for the team. And after a week or two with many, many VMSO meetings we ended up with a result that I was really happy with. It was also the first thing we delivered as a newly created team which helped immensely with team identity building. And in the following months to come I found myself often referring to the vision when the question came up of whether our team should be doing a particular bit of work or take over a certain ticket.&lt;/p&gt;
&lt;p&gt;Since then I&#39;ve also worked on the VMSO for our whole organization of Systems Engineering. And it was an even harder challenge to find something that matches the purpose of a dozen teams and gives them something to align their work to. But it was again a valuable lesson and a time spent building the structure for something I really want to be part of and make contribution to the business.&lt;/p&gt;
&lt;p&gt;These past 18 months have been an incredibly intense learning period for me. Most of the things we did on my old team were the right things to do at the time. We worked on a lot of exciting and important projects that enabled others to build on top. And we were incredibly successful. But we also missed the point where the team needed to change to a different operating model to grow with the business. To align it to where the infrastructure needed to go. I learned to not think about work on an infrastructure team as just &quot;keeping the lights on&quot;, &quot;fixing broken things&quot; or &quot;administering the machines everything else runs on&quot;. But actually take the time to think about what to really contribute to engineering. What the state is I can see on the horizon and not just the work I know needs to get done right now. The two or three things that will make a difference over a laundry list of things that would be nice to do.&lt;/p&gt;
</content>
</entry>
</feed>
